#! /usr/bin/env bash

#-------------------------- Helper functions --------------------------------

# Console colors
red='\033[0;31m'
green='\033[0;32m'
green_bg='\033[42m'
yellow='\033[1;33m'
NC='\033[0m'

echo-red () { echo -e "${red}$1${NC}"; }
echo-green () { echo -e "${green}$1${NC}"; }
echo-green-bg () { echo -e "${green_bg}$1${NC}"; }
echo-yellow () { echo -e "${yellow}$1${NC}"; }

#-------------------------- Execution --------------------------------

set -e
clear

# If floating IP supplied
if [ ! -z "$1" ]; then
  FLOATING_IP="$1"
fi

update_crontab() {
  # Docksal and Ubuntu updates should run once a day
  # Docksal update
  runuser -l docksal -c 'echo -e "0 0 * * * fin update" >> usercron'
  # Ubuntu update
  runuser -l docksal -c 'echo -e "0 0 * * * sudo apt-get -y upgrade" >> usercron'

  # LetsEncrypt certificates update every 30 days, per LetsEncrypt.org recommendation
  runuser -l docksal -c 'echo -e "0 0 1 * * sudo certbot renew" >> usercron'

  # Install the new cron file
  runuser -l docksal -c 'crontab usercron'
  runuser -l docksal -c 'rm -rf usercron'
}

set_floating_ip() {
  # Echo new cron into cron file
  runuser -l docksal -c 'crontab -l > usercron'
  if [ ! -z "$FLOATING_IP" ]; then
    # This makes sure the floating IP is added on reboot 
    runuser -l docksal -c "echo -e \"@reboot sudo ip addr add $FLOATING_IP dev eth0\" >> usercron"
  fi

  # Remove 'nameserver' lines from /etc/resolv.conf
  sed -i '/^nameserver/d' /etc/resolv.conf
  # Make sure we don't leave out Docksal's resolver
  echo "nameserver 192.168.64.100" >> /etc/resolv.conf
  # Use Cloudflare's DNS - which is #1 on dnsperf.com
  echo "nameserver 1.1.1.1" >> /etc/resolv.conf

  # Make sure eth0 is using static, not DHCP IP allocation
  sed -i 's/^iface eth0 inet dhcp$/iface eth0 inet static/g'

  # Prepare the 'address', leave the leading spaces
  ADDR="    address $FLOATING_IP"
  # Prepare the 'netmask', leave the leading spaces
  NMASK="    netmask 32"
  # Prepare the 'gateway', leave the leading spaces
  # This part might be linux specific (tested only on Ubuntu 18)
  GW="    gateway $(ip route list | grep -m1 default | awk '{ print $3 }')"
  # Also might be linux specific
  sed -i "s/^#\s*dns-nameservers.*/$ADDR\n$NMASK\n$GW/g" /etc/network/interfaces.d/50-cloud-init.cfg

  # Install the new cron file
  runuser -l docksal -c 'crontab usercron'
  runuser -l docksal -c 'rm -rf usercron'
}

echo -e " - ${NC}${green} Updating packages...${NC}"; echo ""

export DEBIAN_FRONTEND=noninteractive

# Update package info
apt-get update >/dev/null
apt-get -y install apt-utils >/dev/null

# Upgrade Ubuntu packages
echo -e " - ${NC}${green} Upgrading packages and applying security updates, which may take 1-2 min...${NC}"; echo ""
apt-get -y upgrade >/dev/null 2>&1
# This makes sure that ALL security updates are applied
unattended-upgrade -d >/dev/null 2>&1

# Install packages to allow apt to use a repository over HTTPS
apt-get -y install apt-transport-https ca-certificates gnupg2 software-properties-common host >/dev/null

# Install Oh my ZSH
echo -e " - ${NC}${green} Installing some required packages (zsh, unzip, etc.)...${NC}"; echo ""
apt-get -y install curl zsh git p7zip-full tmux pv parallel unzip >/dev/null

# LetsEncrypt Certbot
echo -e " - ${NC}${green} Installing LetsEncrypt...${NC}"; echo ""
apt-get -y install certbot >/dev/null

######################## If 'docksal' user exists
if id "docksal" >/dev/null 2>&1; then
  echo "Docksal user exists, start using it..."
else 
  # Set SSH to run with NO password, just SSH keys
  echo -e " - ${NC}${green} Securing the server to accept no passwords, just SSH keys and non-root logins${NC}"; echo ""

##### SSH Client settings (ssh_config)
  sed -i '/.*PasswordAuthentication.*/d' /etc/ssh/ssh_config
  echo 'PasswordAuthentication no' >> /etc/ssh/ssh_config

  sed -i '/.*StrictHostKeyChecking.*/d' /etc/ssh/ssh_config
  echo 'StrictHostKeyChecking no' >> /etc/ssh/ssh_config
#-------------------------------------------------------

##### SSH Server settings (sshd_config)
  sed -i '/.*PermitRootLogin.*/d' /etc/ssh/sshd_config
  echo 'PermitRootLogin no' >> /etc/ssh/sshd_config

  sed -i '/.*PasswordAuthentication.*/d' /etc/ssh/sshd_config
  echo 'PasswordAuthentication no' >> /etc/ssh/sshd_config

  sed -i '/.*TCPKeepAlive.*/d' /etc/ssh/sshd_config
  echo 'TCPKeepAlive yes' >> /etc/ssh/sshd_config

  sed -i '/.*ClientAliveInterval.*/d' /etc/ssh/sshd_config
  echo 'ClientAliveInterval 300' >> /etc/ssh/sshd_config
#-------------------------------------------------------

######################## If 'docksal' user DOES NOT exist
  echo -e " - ${NC}${green} Creating the 'docksal' user...${NC}"; echo ""

  # Add docksal as a sudo group with no password
  echo "docksal ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
  # Create the docksal user
  adduser --disabled-password --gecos "" --shell /bin/bash docksal >/dev/null 2>&1
  # Assign the docksal group to the user
  usermod -aG docksal docksal
  # Make sure the SSH key is in place
  mkdir /home/docksal/.ssh
  cp -rf /root/.ssh/authorized_keys /home/docksal/.ssh
  chown -R docksal:docksal /home/docksal/.ssh

  echo -e " - ${NC}${green} Setting up the 'docksal' user...${NC}"; echo ""
  runuser -l docksal -c 'git clone https://github.com/acondura/OpenCloud.git' >/dev/null 2>&1
  echo 'export PATH="$PATH:/home/docksal/OpenCloud/docksal-binaries"' >> /home/docksal/.profile
  chown -R docksal:docksal /home/docksal/.profile

  runuser -l docksal -c "ssh-keygen -t rsa -b 4096 -N '' -f /home/docksal/.ssh/id_rsa" >/dev/null 2>&1

  chown -R docksal:docksal /home/docksal/.ssh
  chmod 755 /home/docksal/.ssh
  chmod -R 600 /home/docksal/.ssh/*

  echo -e " - ${NC}${green} Installing Docksal...${NC}"; echo ""
  # Docksal install command
  runuser -l docksal -c 'curl -fsSL get.docksal.io | bash' >/dev/null 2>&1
  # Make sure 'docksal' user is part of 'docker' group
  usermod -aG docker docksal

  # Set the proxy IP in the global docksal environment file.
  runuser -l docksal -c "echo 'DOCKSAL_VHOST_PROXY_IP=\"0.0.0.0\"' >> /home/docksal/.docksal/docksal.env"
  # Restart Docksal
  runuser -l docksal -c 'fin system reset'

  update_crontab

  # Some VSCode prep
  sudo bash -c "echo 'fs.inotify.max_user_watches=524288' >> /etc/sysctl.conf"
  sudo sysctl -p

  echo-red "Make sure you add the following server SSH public key to your repository:"
  echo ""
  cat /home/docksal/.ssh/id_rsa.pub; echo ""
  echo -e "${green} Rebooting the server to apply settings...${NC}"; echo ""
  reboot

fi
